{"version":3,"sources":["component/Card.js","component/CardList.js","component/searchBox.js","robots.js","component/scroll.js","component/ErrorBoundry.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","alt","src","height","width","CardList","robots","map","user","i","key","searchBox","searchChange","searchfield","type","placeholder","onChange","username","scroll","props","style","overflowY","border","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.feca85b7.chunk.js","sourcesContent":["import React from 'react'; \r\n\r\n\r\nconst Card = ({  name, email, id }) => { \r\n\treturn ( \r\n\t\t<div className='bg-light-green dib br3 pa3 ma1 grow bw2 showdow-5'> \r\n \t\t\t<img alt='robots' src={`https://robohash.org/${id}?200x200`} height=\"200\" width='200' />\r\n \t\t<div> \r\n \t\t   <h2>{name}</h2> \r\n \t\t   <p>{email}</p> \r\n \t  </div>\r\n \t  </div> \r\n\t);\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card.js';\r\n\r\nconst CardList = ({ robots }) => {\r\nreturn (\r\n<div> \r\n\t\t{\r\n\trobots.map((user, i) => {\r\n\t   \treturn ( \r\n\t\t\t<Card\r\n\t\t\t    key={i}\r\n\t\t\t\tid={robots[i].id} \r\n\t\t\t\tname={robots[i].name} \r\n\t\t\t\temail={robots[i].email}\r\n\t\t\t\t/>\t\t\r\n\t\t\t);\r\n\t\t})\r\n} \r\n</div>\r\n); }\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst searchBox = ({searchChange, searchfield}) => {\r\n\treturn (\r\n\t<div className='pa2' >\r\n\t\t<input\r\n\t\t\tclassName='pa3 ba b--green bg-lightest-blue'\r\n\t\t\ttype='search' \r\n\t\t\tplaceholder='search robots'\r\n\t\t\tonChange={searchChange}\r\n\t\t/>\r\n\t</div>\r\n\t);\r\n}\r\n\r\nexport default searchBox;","export const robots = [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz'\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv'\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net'\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org'\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca'\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info'\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz'\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me'\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io'\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz'\n  }\n];\n","import React from 'react'\r\n\r\n// props\r\n// State \r\n// children\r\n\r\nconst scroll = (props)=> {\r\n  return (\r\n  <div style={{ overflowY: 'scroll', border:' 5px solid black', height: '800px' }}>\r\n  {props.children}\r\n  </div>\r\n );\r\n};\r\nexport default scroll;","import React, {Component} from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\thasError: false\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidCatch(error, info) { \r\n\t\tthis.setState({ \r\n\t\t\thasError: true \r\n\t\t}) }\r\n\r\n\trender() { \r\n\t\tif (this.state.hasError) {\r\n\t\t\treturn <h1> oooops. That is not good.</h1>\r\n\t\t}\r\n\t\treturn this.props.children \r\n\t}\r\n}\r\n\r\n\r\nexport default ErrorBoundry;","import React, { Component } from 'react';\r\nimport CardList from '../component/CardList';\r\nimport SearchBox from '../component/searchBox';\r\nimport {robots} from '../robots';\r\nimport Scroll from '../component/scroll';\r\nimport ErrorBoundry from '../component/ErrorBoundry';\r\nimport './App'\r\nimport './App.css'\r\n\r\nclass App extends Component {\r\n\tconstructor() {\r\n\tsuper()\r\n\tthis.state = {\r\n\trobots: [] ,\r\n\tsearchfield: ''\r\n\t} \r\n  }\r\n\r\n  componentDidMount() {\r\n  \tfetch('https://jsonplaceholder.typicode.com/users')\r\n  \t.then(response => response.json())\r\n  \t.then(users => this.setState({ robots: robots }));\r\n      }\r\n\r\n  onSearchChange = (event) => {\r\n  \tthis.setState({ searchfield: event.target.value})\t\r\n  }\r\n \r\n\r\n  render() { \r\n  \tconst { robots, searchfield } = this.state;\r\n  \tconst filteredRobots = robots.filter(robot => {\r\n  \t\treturn robot.name.toLowerCase().includes(searchfield.toLowerCase())\r\n  \t})\r\n  \treturn !robots.length ? <h1> Loading</h1> : \r\n  \t (\r\n\t\t<div className='tc'>\r\n\t\t<h1 className='f1'> RoboFriends </h1> \r\n\t\t<SearchBox searchChange={this.onSearchChange} />\r\n\t\t<Scroll>\r\n        <ErrorBoundry> \r\n          <CardList robots={filteredRobots} />\r\n    \t\t</ErrorBoundry>\r\n    </Scroll>\r\n\t\t</div> \r\n\r\n\t);\r\n}}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App.js';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render( <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}